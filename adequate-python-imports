#!/usr/bin/python
# encoding=UTF-8

# Copyright © 2015 Jakub Wilk <jwilk@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import print_function

import argparse
import imp
import importlib
import os
import re
import signal
import sys
import sysconfig

sys_path = sorted(
    (p for p in sys.path if p.startswith('/')),
    key=len,
    reverse=True
)
sys_path_re = re.compile(
    '^(?:' +
    '|'.join(re.escape(p.rstrip('/')) for p in sys_path) +
    ')/(.+)$'
)
all_suffixes = set(x[0] for x in imp.get_suffixes())
mod_suffix_re = re.compile(
    '(.*?)(?:' +
    '|'.join(re.escape(x) for x in all_suffixes) +
    ')$'
)
public_mod_re = re.compile(
    r'^[^\W_]\w*(/[^\W_]\w*)*$'
)

blacklist = {
    'antigravity',  # spawns a web browser
}

def path2mod(path):
    m = sys_path_re.match(path)
    if m is None:
        return
    m = mod_suffix_re.match(m.group(1))
    if m is None:
        return
    s = m.group(1)
    if s.endswith('/__init__'):
        s = s[:-9]
    if not public_mod_re.match(s):
        return
    return s.replace('/', '.')

def _get_signal_names():
    data = dict(
        (name, getattr(signal, name))
        for name in dir(signal)
        if re.match('^SIG[A-Z0-9]*$', name)
    )
    try:
        if data['SIGABRT'] == data['SIGIOT']:
            del data['SIGIOT']
    except KeyError:
        pass
    try:
        if data['SIGCHLD'] == data['SIGCLD']:
            del data['SIGCLD']
    except KeyError:
        pass
    return dict((no, name) for name, no in data.items())

signal_names = _get_signal_names()

def test_mod(mod):
    for bmod in blacklist:
        if mod == bmod or mod.startswith(bmod + '.'):
            return
    readfd, writefd = os.pipe()
    sys.stdout.flush()
    pid = os.fork()
    if pid == 0:
        # child
        os.close(readfd)
        os.dup2(writefd, 1)
        os.dup2(writefd, 2)
        os.close(writefd)
        try:
            importlib.import_module(mod)
        except SystemExit as exc:
            raise ImportError('attempted to raise {exc}'.format(exc=type(exc).__name__))
        sys.exit(0)
    else:
        # parent
        os.close(writefd)
        with os.fdopen(readfd, 'rb') as fp:
            msg = fp.read()
        if not isinstance(msg, str):
            msg = msg.decode(sys.stdout.encoding, 'replace')
        pid, status = os.waitpid(pid, 0)
        reason = None
        msg = msg.splitlines()
        if status != 0:
            sig = status & 0xFF
            if sig:
                reason = 'killed by {sig}'.format(sig=signal_names.get(sig, sig))
            else:
                n = (status >> 8)
                if n == 1 and msg[-1].startswith(('ImportError: No module named ', 'ImportError: cannot import name ')):
                    reason = msg[-1]
                    msg = []
                else:
                    reason = 'exit code {n}'.format(n=n)
        if reason:
            print('{mod}: {msg}'.format(mod=mod, msg=reason))
            for line in msg:
                print('|', line)
            if msg:
                print()

def modules_from_stdin():
    for line in sys.stdin:
        path = line.rstrip('\n')
        if not os.path.isfile(path):
            continue
        mod = path2mod(path)
        if mod is None:
            continue
        yield mod

def main():
    ap = argparse.ArgumentParser(usage='dpkg -L <package> | %(prog)s')
    if sys.stdin.isatty():
        ap.error('stdin is a tty')
    for mod in sorted(modules_from_stdin()):
        test_mod(mod)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
